iso安全体系结构
功能层次：
· 认证 - 身份校验文件
· 数据完整性 - 数据不被篡改
· 保密 - 数据不能暴露给他人
· 公证/签名
· 访问控制
· 保证/可用性
必须的osi协议栈
· 对等实体认证 (3, 4, 7)
· 数据源认证 (3, 4, 7)
· 访问控制服务 (3, 4, 7)
· 连接保密 (1, 2, 3, 4, 6, 7)
· 无连接的保密 (1, 2, 3, 4, 6, 7)
· 选择性字段的保密 (6, 7)
· 传输保密 (1, 3, 7)
· 恢复连接的完整性 (4, 7)
· 不可恢复连接的完整性 (4, 7)
· 选择字段连接完整性 (7)
· 选择字段的无连接完整性 (7)
· 接受源 (7)
· 接受回执 (7)
机制
· 对等实体认证
o 加密
o 数字签名
o 交换验证
· 数据源认证
o 加密
o 数字签名
· 访问控制服务
o 访问控制列表
o 密码
o 范围列表
o 等级
· 连接保密
o 密码
o 路由控制
· 无连接的保密
o 密码
o 路由控制
· 选择性字段的保密
o 密码
· 传输保密
o 密码
o 传输填充
o 路由控制
· 恢复连接的完整性
o 密码
o 数据完整性
· 不可恢复连接的完整性
o 密码
o 数据完整性
· 选择字段连接完整性
o 密码
o 数据完整性
· 无连接完整性
o 密码
o 数字签名
o 数据完整性
· 选择字段的无连接完整性
o 密码
o 数字签名
o 数据完整性
· 接受源
o 数字签名
o 数据完整性
o 公正
· 接受回执
o 数字签名
o 数据完整性
o 公正
  数据完整性
  确保数据的完整性意味着要提供一个数据未被篡改的测试方法。通常是通过字节数据生成一
  个简单的数字。这个操作被称为hashing，结果数字成为hash 或者hash 值。
  Go 支持几个hash 算法,包括MD4, MD5, RIPEMD-160, SHA1, SHA224, SHA256, SHA384 and
  SHA512。它们都尽可能按照 Go 程序员关注的，遵循相同的模式：在适当的包中定义New
  或类似的方法，返回一个hash包中的Hash 对象。
  一个Hash结构体拥有一个 io.Writer接口，你可以通过writer方法写入被 hash 的数据.你可以
  通过Size方法获取hash 值的长度，Sum方法返回 hash 值。
key对称加密
数据加密有两种机制。第一种方式是在加密和解密时都使用同一个key。加密方和解密方都
需要知道这个key。此处如何在这两者之间传输这个key。
go支持的对称加密算法都是block 算法。因为它们必须基于数据块(block)。如果你的数据不匹配block 的大小，那就必须在最后使用空格来填充多余的空间
每个算法都被表示为一个Cipher对象。可通过在相应的包中使用对称 key作为参数调用NewCipher方法来创建该对象。
创建cipher 对象后，就能通过它加密和解密数据块。Blowfish 需要8 位的block
公钥加密和解密需要两个key：一个用来加密，另一个用来解密。加密key 通常是公开的，这样任何人都可以给你发送加密数据。解密key 必须保密，否则任何人都可以解密数据。公
钥系统是非对称的，不同的key 有不同的用途。
Go 支持很多公钥加密系统，RSA 就是一个典型的例子。