ip提供了第3层osi网络协议栈，tcp/udp提供第4层
sctp---流控制传输协议
dtn---即时延容忍网络。在一些特定的网络环境下（如星际网络,传感器网络等），会经常出现网络断开的现象，导致报文在传输过程中不能确保端到端的路径，这类网络被称为时延容忍网络
TCP/IP是Unix的首要网络协议。TCP/IP等于传输控制协议/互联网协议
tcp面向连接协议，udp无连接协议
IP层提供了无连接的不可靠的传输系统，任何数据包之间的关联必须依赖更高的层来提供。通过路由连接到因特网，还负责将大数据包分解为更小的包，并传输到另一端后进行重组。
IP层包头支持数据校验，在包头包括源地址和目的地址。
TCP是构建于IP之上的面向链接的协议。它提供了一个 虚电路 使得两个应用进程可以通过它来通信。它通过端口号来识别主机上的服务。
IPAddr包含ip类型的结构体主要用于通过ip主机名执行DNS查找
ResolveIPAddr函数将对某个主机名执行DNS查询，并返回一个简单的IP地址。然而，通常主机如果有多个网卡，则可以有多个IP地址。它们也可能有多个主机名，作为别名
services
服务运行在主机。它们通常长期存活，同时被设计成等待的请求和响应请求。有许多类型的服务，有他们能够通过各种方法向客户提供服务。互联网的世界基于TCP和UDP这两种通信方法提供许多这些服务，虽然也有其他通信协议如SCTP伺机取代。许多其他类型的服务
例如点对点, 远过程调用, 通信代理, 和许多其他建立在TCP和UDP之上的服务之上。
ports
服务存活于主机内。IP地址可以定位主机。但在每台计算机上可能会提供多种服务，需要一个简单的方法对它们加以区分。TCP，UDP，SCTP或者其他协议使用 端口号 来加以区分。这里使用一个1到65,535的无符号整数，每个服务将这些端口号中的一个或多个相关联。
Telnet服务通常使用端口号23的TCP协议。DNS使用端口号53的TCP或UDP协议。FTP使用端口21和20的命令，进行数据传输。HTTP通常使用端口80，但经常使用，端口8000，8080和8088，协议为TCP。X Window系统往往需要端口6000-6007TCP和UDP协议
tcpAddr类型包含一个ip和一个part
函数 ResolveTCPAddr用来创建一个 TCPAddr // "www.google.com:80" 或 '127.0.0.1:22"
tcp套接字
客户端需要一个API，让您连接到服务，然后将消息发送到该服务，并从服务读取回复
个服务器，你需要能够绑定到一个端口，并监听它。当有消息到来，你需要能够读取它并回复客户端
TCPConn 被客户端和服务器用来读写信息
客户端使用TCPConn写入请求到服务器, 并从TCPConn的读取响应
1. 指定的地址中可能存在语法错误
2. 尝试连接到远程服务可能会失败。例如, 所请求的服务可能没有运行, 或者有可能是
主机没有连接到网络
3. 虽然连接已经建立，如果连接突然丢失也可能导致写失败，或网络超时
4. 同样，读操作也可能会失败

时间服务：默认端口13，协议是TCP和UDP几乎没人运行时间服务器
在一个服务器上注册并监听一个端口。然后它阻塞在一个"accept"操作，并等待客户端连接。
当一个客户端连接, accept调用返回一个连接(connection)对象。时间(Daytime)服务非常简单，
只是将当前时间写入到客户端, 关闭该连接，并继续等待下一个客户端
udp
在一个无连接的协议中，每个消息都包含了关于它的来源和目的地的信息。没有"session"建
立在使用长寿命的套接字。UDP客户端和服务器使用的数据包，单独包含来源和目的地的
信息。除非客户端或服务器这样做，否则消息的状态不会保持。这些消息不能保证一定到达，
也可能保证按顺序到达。
go处理tcp和udp的区别是如何处理可能的多个数据包同时到达，没有一个管理tcp会话的缓冲
一个服务器可能不止在一个端口监听多个客户端，或是更多端口，在这种情况下，它在端口之间使用某种轮询机制
